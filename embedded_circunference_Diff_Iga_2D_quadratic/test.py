import numpy as np
from scipy.interpolate import RBFInterpolator

# Datos
mClosestInterpolationPointsCoordinates = np.array([
    (0.838029, 0.645833, 0), (0.838029, 0.661971, 0), (0.838029, 0.629696, 0),
    (0.838029, 0.671363, 0), (0.838029, 0.620304, 0), (0.838029, 0.6875, 0),
    (0.838029, 0.604167, 0), (0.854167, 0.645833, 0), (0.838029, 0.588029, 0),
    (0.838029, 0.703637, 0), (0.854167, 0.661971, 0), (0.854167, 0.629696, 0),
    (0.854167, 0.671363, 0), (0.854167, 0.620304, 0), (0.838029, 0.578637, 0),
    (0.838029, 0.713029, 0), (0.854167, 0.604167, 0), (0.854167, 0.6875, 0),
    (0.796363, 0.754696, 0), (0.854167, 0.703637, 0), (0.854167, 0.588029, 0),
    (0.838029, 0.5625, 0), (0.838029, 0.729167, 0), (0.870304, 0.645833, 0),
    (0.870304, 0.629696, 0), (0.870304, 0.661971, 0), (0.870304, 0.671363, 0),
    (0.870304, 0.620304, 0), (0.854167, 0.578637, 0), (0.854167, 0.713029, 0),
    (0.8125, 0.754696, 0), (0.870304, 0.6875, 0), (0.870304, 0.604167, 0),
    (0.879696, 0.645833, 0), (0.796363, 0.770833, 0), (0.879696, 0.629696, 0),
    (0.879696, 0.661971, 0), (0.838029, 0.546363, 0), (0.838029, 0.745304, 0),
    (0.879696, 0.671363, 0), (0.879696, 0.620304, 0), (0.854167, 0.5625, 0),
    (0.854167, 0.729167, 0), (0.828637, 0.754696, 0), (0.870304, 0.588029, 0),
    (0.870304, 0.703637, 0), (0.879696, 0.6875, 0), (0.879696, 0.604167, 0),
    (0.8125, 0.770833, 0), (0.870304, 0.578637, 0)
])

mClosestPointsSolutionGradientX = np.array([
    1.21422, 1.33745, 1.08794, 1.40772, 1.01307, 1.52536, 0.882543, 1.24548,
    0.749702, 1.639, 1.37184, 1.11594, 1.44387, 1.03911, 0.671365, 1.70327,
    0.905197, 1.5645, 1.80949, 1.68109, 0.768941, 0.535616, 1.81011, 1.27674,
    1.14394, 1.40622, 1.48002, 1.06516, 0.688604, 1.74705, 1.873, 1.60364,
    0.927851, 1.2924, 1.89608, 1.15796, 1.42347, 0.398503, 1.91236, 1.49817,
    1.07822, 0.549382, 1.85667, 1.9365, 0.78818, 1.72318, 1.6233, 0.939228,
    1.96269, 0.705842
])

# Punto a interpolar
interpolation_point = np.array([[0.745304, 0.645833, 0]])

# Crear el interpolador RBF con una base lineal
# Crear el interpolador RBF con base "inverse_multiquadric"
rbf_interpolator = RBFInterpolator(
    mClosestInterpolationPointsCoordinates,
    mClosestPointsSolutionGradientX,
    kernel='inverse_multiquadric',  # Especificar el kernel
    epsilon=1.0  # Parámetro de forma para ajustar el comportamiento del kernel
)

# Realizar la interpolación
interpolated_value = rbf_interpolator(interpolation_point)

# Resultado
print(f"El valor interpolado del gradiente en el punto {interpolation_point} es: {interpolated_value[0]}")